cmake_minimum_required (VERSION 3.8)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_LIBRARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_LIBRARY_DIR})

foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR})
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_LIBRARY_DIR})
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_LIBRARY_DIR})
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

set(CURR_PROJECT_SOURCE_DIR "${SIRION_ROOT_DIR}/main")



set(json_include ${SIRION_EXTERNAL_DIR}/json11)
set(json_lib_dir ${SIRION_EXTERNAL_DIR}/lib/json11)

add_library(json11 ${json_include}/json11.cpp)

# file(GLOB_RECURSE GENERATED "${CURR_PROJECT_SOURCE_DIR}/meta_parser/parser/*.cpp" "${CURR_PROJECT_SOURCE_DIR}/meta_parser/parser/*.h")
file(GLOB_RECURSE SOURCES "*.cpp")
file(GLOB_RECURSE HEADERS "*.h")
# file(GLOB_RECURSE HEADERS "*.h")

# Build 3rd-party tools
file(GLOB GLFW_LIBRARY ${PROJECT_LIBRARY_DIR}/glfw/glfw3.lib)

source_group(TREE ${CURR_PROJECT_SOURCE_DIR} FILES ${SOURCES} ${HEADERS})

add_executable(SirionMain ${SOURCES} ${HEADERS})
add_dependencies(SirionMain glfw SirionShader)
target_link_libraries(SirionMain ${GLFW_LIBRARY} ${Vulkan_LIBRARY})
target_include_directories(
  SirionMain
  PUBLIC $<BUILD_INTERFACE:${SIRION_ROOT_DIR}>)

### precompile
# set global vari used by precompile
set(SIRION_MAIN_HEADERS " ${HEADERS}" PARENT_SCOPE)

if (CMAKE_VERSION VERSION_GREATER 3.12)
  set_property(TARGET SirionMain PROPERTY CXX_STANDARD 20)
endif()