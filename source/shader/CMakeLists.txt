cmake_minimum_required (VERSION 3.8)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_LIBRARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_LIBRARY_DIR})

foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR})
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_LIBRARY_DIR})
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_LIBRARY_DIR})
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

set(PROJECT_HEADER_DIRECTORY "include")
include_directories("include")
set(GENERATED_SHADER_FOLDER "generated")
set(GENERATED_SHADER_HEADER_DIRECTORY "${GENERATED_SHADER_FOLDER}/include")
set(SHADER_DIR_GLSL "glsl")
set(SHADER_DIR_HLSL "hlsl")
if (NOT EXISTS ${GENERATED_SHADER_FOLDER})
  file(MAKE_DIRECTORY ${GENERATED_SHADER_FOLDER})
endif()
if (NOT EXISTS ${GENERATED_SHADER_HEADER_DIRECTORY})
  file(MAKE_DIRECTORY ${GENERATED_SHADER_HEADER_DIRECTORY})
endif()
if (NOT EXISTS ${GENERATED_SHADER_FOLDER}/spv)
  file(MAKE_DIRECTORY ${GENERATED_SHADER_FOLDER}/spv)
endif()

file(GLOB HEADERS ${PROJECT_HEADER_DIRECTORY}/*.h)


# Add shaders
file(GLOB SHADER_GLSL "${SHADER_DIR_GLSL}/*.vert" "${SHADER_DIR_GLSL}/*.frag" "${SHADER_DIR_GLSL}/*.comp" "${SHADER_DIR_GLSL}/*.geom" "${SHADER_DIR_GLSL}/*.tesc" "${SHADER_DIR_GLSL}/*.tese" "${SHADER_DIR_GLSL}/*.mesh" "${SHADER_DIR_GLSL}/*.task" "${SHADER_DIR_GLSL}/*.rgen" "${SHADER_DIR_GLSL}/*.rchit" "${SHADER_DIR_GLSL}/*.rmiss" "${SHADER_DIR_GLSL}/*.rcall")
file(GLOB SHADER_HLSL "${SHADER_DIR_HLSL}/*.vert" "${SHADER_DIR_HLSL}/*.frag" "${SHADER_DIR_HLSL}/*.comp" "${SHADER_DIR_HLSL}/*.geom" "${SHADER_DIR_HLSL}/*.tesc" "${SHADER_DIR_HLSL}/*.tese" "${SHADER_DIR_HLSL}/*.mesh" "${SHADER_DIR_HLSL}/*.task" "${SHADER_DIR_HLSL}/*.rgen" "${SHADER_DIR_HLSL}/*.rchit" "${SHADER_DIR_HLSL}/*.rmiss" "${SHADER_DIR_HLSL}/*.rcall")
source_group("Shaders\\GLSL" FILES ${SHADER_GLSL})
source_group("Shaders\\HLSL" FILES ${SHADER_HLSL})

# Compile shaders
include(${PROJECT_SOURCE_DIR}/cmake/compile_shader.cmake)
set(TARGET_NAME "SirionShader")

compile_shader(
  "${SHADER_GLSL}"
  "${TARGET_NAME}"
  "${PROJECT_HEADER_DIRECTORY}"
  "${GENERATED_SHADER_FOLDER}"
  "${GENERATED_SHADER_HEADER_DIRECTORY}"
  "${GLSLANG_VALIDATOR_PATH}")
